Select *
FROM layoffs

-- How to clean up Data 
-- 1 Remove duplicates
-- 2. Standardize the data
-- 3. Null values or Blank values
-- 4. Remove Any Columns

-------------------------------

-- 1. REMOVE DUPLICATES --


-- Create a duplicate of the data so you can make changes without any consequences to the source data 
-- VERY IMPORTANT as you dont want to play with the raw data
CREATE TABLE layoffs_staging 
LIKE layoffs

Insert layoffs_staging
Select *
FROM layoffs
---------------------------------------
-- looking for dupliactes, lets use a Row_Number partition by ALL COLUMNS that have unique items
Select  *,
Row_Number () Over (partition by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging

-- using CTE to select use the above  to see if there's duplicate above >1


WITH duplicate_cte AS
( Select  *,
Row_Number () Over (partition by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions) AS row_num
FROM layoffs_staging
)
Select *
FRom duplicate_cte
WHERE row_num > 1;

-- once i found duplicates, I went ahead and checked them below to understand the data and what we can actually delete
Select * FROM layoffs_staging
WHERE company = 'Casper'


-- To delete is not easy in MySQL. In MSQLServer youre able to take the above query and delete those results
-- Instead I'm goign to create a second table with just the row number 2 which is the duplicates
--copying the create statement in the layoff_staging and creating a layoff_staging2
-- im adding a row_number column to identify which one is a duplicate

CREATE TABLE `layoffs_staging2` ( 
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

Select *
FROM layoffs_staging2
-- now that we have this new table, im going to insert the values that are duplicates

INSERT INTO layoffs_staging2
Select  *,
Row_Number () Over (partition by company, location, industry, total_laid_off, percentage_laid_off, date, stage, country, funds_raised_millions)  AS row_num
FROM layoffs_staging;

-- now deleting anything that is above a 2 in order to get rid of 
DELETE
FROM layoffs_staging2
WHERE row_num > 1

-- now we deleted all row_num above 2
Select *
FROM layoffs_staging2
WHERE row_num = 1

--------------------------------------------------
-- 2. STANDARDIZING DATA --

--  -----updating Company row -- ------
Select *
FROM layoffs_staging2

-- noticed some spaces in the company row, going to select  a distinct for company row

Select company, TRIM(company)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET company = TRIM(company);

Select *
FROM layoffs_staging2;

-- updating industry --
-- crypto and cryptocurrency is the only one that I feel confident in updating

Select distinct industry
from layoffs_staging2
Order by 1;

Select *
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- lets check location and country

Select distinct location
FROM layoffs_staging2
ORDER BY location;

-- found unites states that has a period
Select distinct country
FROM layoffs_staging2
ORDER BY country;

Select distinct country, trim(country) -- TRIM wont fix the issue so going to use TRAILING
FROM layoffs_staging2
order by country;

Select distinct country, TRIM(trailing '.' FROM country)
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE Country LIKE 'United states%';


-- Date column is a Text data type, we need correct this
-- change to Month/Day/Year using String to Date function more can be found here - https://www.w3schools.com/sql/func_mysql_str_to_date.asp

Select `date`, str_to_date(`date`, '%m/%d/%Y')
FROM layoffs_staging2;

Update layoffs_staging2
SET `date` = str_to_date(`date`, '%m/%d/%Y');

-- now that we formatted the `date` column, we now need to update the DATA TYPE for this column to reflect date

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-----------------------------
-- 3. NULLS or no value

SELECT *
FROM layoffs_st
aging2
WHERE total_laid_off IS Null AND Percentage_laid_off IS NULL;
-- these might not mean much as they are dependent on eachother

-- lets check out industry as we have some blanks and null

Select DISTINCT industry
FROM layoffs_staging2;

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL 
OR industry = '';

Select *
FROm layoffs_staging2
WHERE company = 'Airbnb';

-- lets join the table into eachother so we can update the empty values in industry

Select t1.industry, t2.industry
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
	ON t1.company=t2.company
WHERE (T1.industry is NULL OR t1.industry = '')
	AND t2.industry IS NOT NULL;
    
-- the above wont work in an update statement as the empty values should be considered NULL
-- setting the empty industry to null

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';

 UPDATE layoffs_staging2 t1
 JOIN layoffs_staging2 t2
	ON t1.company=t2.company
 SET t1.industry = t2.industry
 WHERE (T1.industry is NULL OR t1.industry = '')
	AND t2.industry IS NOT NULL; 


-- now that we updated evertyhing we only have one left that is Ballys 
-- but since we don't have a industry we'll leave it alone

SELECT *
FROM layoffs_staging2
WHERE company LIKE 'Bally%';


----------------------------------
-- 4.REMOVE COLUMNS --

-- there is no use of these columns as they are both null so let's delete
SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS Null AND Percentage_laid_off IS NULL;

-- deleting the above 

DELETE FROM layoffs_staging2
WHERE total_laid_off IS Null 
AND Percentage_laid_off IS NULL;

-- lets delete the row_num column as its no longer needed cause they are all '1'

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

Select *
FROM layoffs_staging2;

